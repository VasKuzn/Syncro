// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SyncroBackend.Repositories.Data.DataBaseContext;

#nullable disable

namespace SyncroBackend.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250531200936_ServerPermissionsUpdate")]
    partial class ServerPermissionsUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SyncroBackend.Models.AccountModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("firstname")
                        .HasColumnType("text");

                    b.Property<bool>("isOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("lastname")
                        .HasColumnType("text");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("phonenumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.ConferenceRolesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("conferenceId")
                        .HasColumnType("uuid");

                    b.Property<long>("rolePermissions")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("conferenceId");

                    b.ToTable("ConferenceRoles", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.FriendsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("friendsSince")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userWhoRecieved")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userWhoSent")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("userWhoRecieved");

                    b.HasIndex("userWhoSent", "userWhoRecieved")
                        .IsUnique();

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.GroupConferenceMemberModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("groupConferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("groupConferenceNickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("joiningDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("groupConferenceId");

                    b.HasIndex("roleId");

                    b.ToTable("GroupConferenceMembers", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.GroupConferenceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("conferenceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("groupConferenceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("GroupConferences", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.MessageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("groupConferenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("isPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("isRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("messageContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("messageDateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("personalConferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("previousMessageContent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("referenceMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("sectorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("groupConferenceId");

                    b.HasIndex("personalConferenceId");

                    b.HasIndex("sectorId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.PersonalAccountInfoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("dateOfAccountCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("dateOfLastChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("dateOfLastOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("isHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("PersonalAccountInfo", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.PersonalConferenceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("callType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isFriend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("lastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("startingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("user1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("user2")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("user1");

                    b.HasIndex("user2");

                    b.ToTable("PersonalConferences", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.RolesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isDisplayedSeparetely")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("rolePermissions")
                        .HasColumnType("bigint");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("serverId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.SectorModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("isPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("sectorDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("sectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sectorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("serverId");

                    b.ToTable("Sectors", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.SectorPermissionsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("assignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("sectorId")
                        .HasColumnType("uuid");

                    b.Property<long>("sectorPermissions")
                        .HasColumnType("bigint");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("roleId");

                    b.HasIndex("sectorId");

                    b.HasIndex("serverId");

                    b.ToTable("SectorPermissions", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerMemberModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uuid");

                    b.Property<string>("banReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("isBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("joiningDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.Property<string>("serverNickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("serverId");

                    b.ToTable("ServerMembers", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerMemberRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("roleId");

                    b.HasIndex("serverId");

                    b.ToTable("ServerMemberRoles", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ownerId")
                        .HasColumnType("uuid");

                    b.Property<string>("serverDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("serverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ownerId");

                    b.ToTable("Servers", (string)null);
                });

            modelBuilder.Entity("SyncroBackend.Models.ConferenceRolesModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.GroupConferenceModel", null)
                        .WithMany()
                        .HasForeignKey("conferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.FriendsModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("userWhoRecieved")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("userWhoSent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.GroupConferenceMemberModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.GroupConferenceModel", null)
                        .WithMany()
                        .HasForeignKey("groupConferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.ConferenceRolesModel", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.MessageModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.GroupConferenceModel", null)
                        .WithMany()
                        .HasForeignKey("groupConferenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SyncroBackend.Models.PersonalConferenceModel", null)
                        .WithMany()
                        .HasForeignKey("personalConferenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SyncroBackend.Models.SectorModel", null)
                        .WithMany()
                        .HasForeignKey("sectorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SyncroBackend.Models.PersonalAccountInfoModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithOne()
                        .HasForeignKey("SyncroBackend.Models.PersonalAccountInfoModel", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.PersonalConferenceModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("user1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("user2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.RolesModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.ServerModel", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.SectorModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.ServerModel", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.SectorPermissionsModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.RolesModel", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.SectorModel", null)
                        .WithMany()
                        .HasForeignKey("sectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.ServerModel", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerMemberModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.ServerModel", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerMemberRoles", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.RolesModel", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SyncroBackend.Models.ServerModel", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SyncroBackend.Models.ServerModel", b =>
                {
                    b.HasOne("SyncroBackend.Models.AccountModel", null)
                        .WithMany()
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
